{"name":"Fixio","tagline":"FIX Protocol Support for Netty","body":"fixio - FIX Protocol Support for Netty [![Build Status](https://travis-ci.org/kpavlov/fixio.png?branch=master)](https://travis-ci.org/kpavlov/fixio)\r\n=====\r\n\r\n# Overview #\r\n\r\n## Why One More FIX Protocol API\r\n\r\nThis API is intended to replace well known [QuickFIX/J][quickfix] in high-frequency trading scenarios.\r\n\r\n## Design goals\r\n\r\n1. Implement [FIX Protocol][fixprotocol] Java API with as low memory footprint as possible in order to eliminate unnecessary GC overhead,\r\nthus improving overall application performance under high load.\r\n2. Provide [FIX Protocol][fixprotocol] Codecs for [Netty][netty], to make it possible to get rid of Apache [Mina][mina] which is used by [QuickFIX/J][quickfix] as a transport layer.\r\n3. Avoid using expensive operations:\r\n     - Avoid synchronization.\r\n     - Replace BigDecimals with custom [Fixed Point Number][FixedPointNumber] implementation for financial data.\r\n     - Reuse java.util.Calendar and java.util.TimeZone instances.\r\n\r\nThe API has a number of [limitations](#Limitations), so it may be not suitable for any FIX application.\r\n\r\n## Limitations\r\n\r\n1. Logon message encryption is not supported. EncryptMethod(98)=0\r\n2. XmlData is not supported\r\n3. Message encodings other than US-ASCII are not supported.\r\n4. ...\r\n\r\n# Getting Started\r\n\r\n1. [Download ZIP archive](archive/master.zip) or clone/fork the repository.\r\n2. Build and install project artifacts to your local maven repository:\r\n`mvn clean install`\r\n3. Add the dependency to your project\r\n\r\n~~~~~~~~~xml\r\n<dependency>\r\n    <groupId>kpavlov.fixio</groupId>\r\n    <artifactId>core</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n~~~~~~~~~\r\n\r\nYou'll also need a slf4j API implementation at runtime, so please add appropriate dependency, e.g.:\r\n\r\n~~~~~~~~~xml\r\n<dependency>\r\n    <groupId>org.slf4j</groupId>\r\n    <artifactId>slf4j-simple</artifactId>\r\n    <version>1.7.5</version>\r\n    <scope>runtime</scope>\r\n    <optional>true</optional>\r\n</dependency>\r\n~~~~~~~~~\r\n\r\n## Examples\r\n\r\nYou may find working example of [client][client-example]\r\nand [server][server-example] applications in module [\"examples\"][examples-module].\r\n\r\nI recommend running server with Concurrent Mark Sweep Collector enabled: `-XX:+UseConcMarkSweepGC`\r\nand increased Survivor spaces (`-XX:SurvivorRatio=4`).\r\n\r\n## Writing Simple FIX Client\r\n\r\nTo create a simple FIX client you need to:\r\n\r\n1. Implement [FixApplication][FixApplication].\r\n   You may extend [FixApplicationAdapter][FixApplicationAdapter] as a quick start.\r\n\r\n2. Create an instance of [FixClient][FixClient] and initialize if with [FixApplication][FixApplication] you've just created and classpath reference to FIX session settings property file.\r\n\r\n3. Invoke `FixClient.connect(host, port)` to initiate connection.\r\n   Method `connect(...)` returns a [ChannelFeature][ChannelFeature] which which will be notified when a channel is closed,\r\n    so you may invoke the method `sync()` on it if you wish to wait for connection to be closed.\r\n\r\n~~~~~~~~~java\r\nFixApplication app = new FixApplicationAdapter();\r\nclient = new FixClient(app);\r\n\r\n// set settings file location related to classpath\r\nclient.setSettingsResource(\"/client.properties\");\r\n\r\n// connect to specified host and port\r\nChannelFeature closeFeature = client.connect(\"localhost\", 10201);\r\n\r\n// wait until FIX Session is closed\r\ncloseFeature.sync();\r\n\r\n// Shutdown FIX client\r\nclient.disconnect();\r\n~~~~~~~~~\r\n\r\n## Working With FIX Messages\r\n\r\nThere are two API interfaces to represent FIX messages: [FixMessage][FixMessage] and [FixMessageBuilder][FixMessageBuilder].\r\n\r\n[FixMessage][FixMessage] represents received message, whereas [FixMessageBuilder][FixMessageBuilder] represents a message to be sent.\r\n\r\nExample of using FixMessageBuilder:\r\n\r\n~~~~~~~~~java\r\nFixMessageBuilder userRequest = new FixMessageBuilderImpl(MessageTypes.USER_REQUEST);\r\nuserRequest.add(UserRequestID, \"UserRequestID\");\r\nuserRequest.add(UserRequestType, 4);//UserRequestType=RequestIndividualUserStatus\r\nuserRequest.add(Username, \"user\");\r\n~~~~~~~~~\r\n\r\nTo create a FIX message components, also referred as groups, use methods `FixMessageBuilder.newGrop(...)`.\r\nThese methods returns a new group you'll to add new fields to.\r\n\r\nExample of using FixMessageBuilder with groups:\r\n\r\n~~~~~~~~~java\r\nFixMessageBuilder quoteRequest = new FixMessageBuilderImpl(MessageTypes.QUOTE_REQUEST);\r\nquoteRequest.add(FieldType.QuoteReqID, quoteRequestId);\r\nquoteRequest.add(FieldType.ClOrdID, clientOrderId);\r\n\r\nGroup instrument1 = quoteRequest.newGroup(FieldType.NoRelatedSym, 2); // create group with 2 fields\r\ninstrument1.add(FieldType.Symbol, \"EUR/USD\");\r\ninstrument1.add(FieldType.SecurityType, \"FOR\");\r\n\r\nGroup instrument2 = quoteRequest.newGroup(FieldType.NoRelatedSym); // create group with unknown number of fields\r\ninstrument2.add(FieldType.Symbol, \"EUR/CHF\");\r\ninstrument2.add(FieldType.SecurityType, \"FOR\");\r\n\r\nquoteRequest.add(FieldType.QuoteRequestType, 2); //QuoteRequestType=AUTOMATIC\r\n~~~~~~~~~\r\n\r\nIt is preferable to specify group size to achieve optimal performance and memory usage.\r\n\r\n## FixApplication\r\n\r\n[FixApplication][FixApplication] interface should be implemented to handle application business logic.\r\nIt is a callback interface which handles FIX session events, incoming and outgoing messages.\r\n\r\n[FixApplication][FixApplication] has the following methods:\r\n\r\n- to handle session events (`onLogon(...)` and `onLogout(...)`),\r\n- to process incoming messages (`onMessage(...)`)\r\n- to pre-process outgoing message (`beforeSendMessage(...)`). You may add custom fields to FixMessageHeader in this method.\r\n\r\nStart your with extending [FixApplicationAdapter][FixApplicationAdapter].\r\n\r\n## Writing Simple FIX Server\r\n\r\nTo implement FIX server one should follow these steps:\r\n\r\n1. Implement [FixApplication][FixApplication]. Use [FixApplicationAdapter][FixApplicationAdapter] as starting point.\r\n2. Create [FixAuthenticator][FixAuthenticator] which is responsible for accepting or rejecting client connections.\r\n   There is a simple implementation - [AcceptAllAuthenticator][] which accepts all client connections.\r\n3. Create and start [FixServer][FixServer].\r\n\r\nFIX Server example:\r\n\r\n~~~~~~~~~java\r\nFixApplication app = new FixApplicationAdapter();\r\nFixServer server = new FixServer(port, new AcceptAllAuthenticator(), app);\r\nserver.start();\r\n~~~~~~~~~\r\n\r\n[FixedPointNumber]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/fixprotocol/fields/FixedPointNumber.java\r\n[FixApplication]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/handlers/FixApplication.java\r\n[FixApplicationAdapter]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/handlers/FixApplicationAdapter.java\r\n[FixClient]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/FixClient.java\r\n[FixServer]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/FixServer.java\r\n[FixAuthenticator]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/netty/pipeline/server/FixAuthenticator.java\r\n[AcceptAllAuthenticator]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/netty/pipeline/server/AcceptAllAuthenticator.java\r\n[ChannelFeature]: http://netty.io/5.0/api/io/netty/channel/ChannelFuture.html\r\n\r\n[FixMessage]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/fixprotocol/FixMessage.java\r\n[FixMessageBuilder]: https://github.com/kpavlov/fixio/treemaster/core/src/main/java/fixio/fixprotocol/FixMessageBuilder.java\r\n\r\n[client-example]: https://github.com/kpavlov/fixio/treemaster/examples/src/main/java/fixio/examples/priceclient\r\n[server-example]: https://github.com/kpavlov/fixio/treemaster/examples/src/main/java/fixio/examples/priceserver\r\n[examples-module]: https://github.com/kpavlov/fixio/treemaster/examples\r\n[quickfix]: http://www.quickfixj.org/ \"Java Open Source FIX Engine\"\r\n[mina]: http://directory.apache.org/subprojects/mina/ \"Apache Mina\"\r\n[netty]: http://netty.io/ \"Netty\"\r\n[fixprotocol]: http://www.fixprotocol.org/ \"FIX Protocol\"\r\n","google":"UA-2530248-20","note":"Don't delete this file! It's used internally to help with page regeneration."}